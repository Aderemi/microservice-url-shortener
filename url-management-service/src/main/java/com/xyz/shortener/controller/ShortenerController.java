package com.xyz.shortener.controller;

import com.xyz.shortener.utility.UrlUtility;
import com.xyz.shortener.dto.FakeUrl;
import com.xyz.shortener.error.UrlFormatError;
import com.xyz.shortener.repository.UserRepo;
import com.xyz.shortener.dto.RealUrl;
import com.xyz.shortener.entity.URL;
import com.xyz.shortener.entity.User;
import com.xyz.shortener.service.RoutingService;
import org.apache.commons.validator.routines.UrlValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import lombok.extern.slf4j.Slf4j;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.List;
import java.util.NoSuchElementException;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@Slf4j
public class ShortenerController {
    protected final RoutingService urlService;

    protected final UserRepo userRepo;

    @Autowired
    public ShortenerController(RoutingService urlService, UserRepo userRepo) {
        this.urlService = urlService;
        this.userRepo = userRepo;
    }

    /**
     * @param realUrl Takes an object of RealUrl supplied in the request body
     * @param request To determine the protocol://domain:port part to form shortened url
     * @return An object of FakeUrl serialized as JSON in the response
     */
    @PostMapping("/shorten")
    public ResponseEntity<Object> saveUrl(@RequestBody RealUrl realUrl, HttpServletRequest request) {

        // Validation checks to determine if the supplied URL is valid
        UrlValidator validator = new UrlValidator(
                new String[]{"http", "https"}
        );
        String url = realUrl.getRealUrl();
        if (!validator.isValid(url)) {
            log.error("Malformed Url provided");

            UrlFormatError error = new UrlFormatError("url", realUrl.getRealUrl(), "Invalid URL");

            // returns a custom body with error message and bad request status code
            return ResponseEntity.badRequest().body(error);
        }
        String baseUrl = null;

        try {
            baseUrl = UrlUtility.getBaseUrl(request.getRequestURL().toString());
        } catch (MalformedURLException e) {
            log.error("Malformed request url");
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Request url is invalid", e);
        }
        User user = this.getCurrentUser();

        // Retrieving the Shortened url and concatenating with protocol://domain:port
        FakeUrl fakeUrl = urlService.getFakeUrl(realUrl, user.getId());
        fakeUrl.setFakeUrl(baseUrl + fakeUrl.getFakeUrl());

        log.debug(String.format("FakeUrl for RealUrl %s is %s", realUrl.getRealUrl(), fakeUrl.getFakeUrl()));

        return new ResponseEntity<>(fakeUrl, HttpStatus.OK);
    }

    /**
     * @param response HttpServletResponse - used to redirect to real url
     * @param shortenString Shortened string - Text is Base62 encoded generated by "/shorten" endpoint
     */
    @GetMapping("/{shortenString}")
    public void redirectToRealUrl(HttpServletResponse response, @PathVariable String shortenString) {
        try {
            RealUrl realUrl = urlService.getRealUrl(shortenString);

            log.info(String.format("Redirecting to %s", realUrl.getRealUrl()));

            // Redirects the reponse to the real url
            response.sendRedirect(realUrl.getRealUrl());
        } catch (NoSuchElementException e) {
            log.error(String.format("No URL found for %s in the db", shortenString));
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Url not found", e);
        } catch (IOException e) {
            log.error("Could not redirect to the real url");
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Could not redirect to the real url", e);
        }
    }

    /**
     * @return An object of FakeUrl serialized as JSON in the response
     */
    @GetMapping("/my-urls")
    public ResponseEntity<List<URL>> getAllUrlsByUser(){
        return new ResponseEntity<>(this.urlService.getUrlRepo().findAllUrlByUserId(this.getCurrentUser().getId()), HttpStatus.OK);
    }

    private User getCurrentUser(){
        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        String username;
        if (principal instanceof UserDetails) {
            username = ((UserDetails)principal).getUsername();
        } else {
            username = principal.toString();
        }

        return this.userRepo.findByUserName(username);
    }
}
