package com.xyz.shortener.service;

import com.xyz.shortener.repository.UrlRepo;
import com.xyz.shortener.utility.KafkaMessageType;
import com.xyz.shortener.utility.UrlShortener;
import com.xyz.shortener.entity.URL;
import com.xyz.shortener.dto.RealUrl;
import com.xyz.shortener.dto.FakeUrl;
import com.xyz.shortener.dto.KafkaMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import lombok.extern.slf4j.Slf4j;
import lombok.Data;
import lombok.AllArgsConstructor;

import java.util.List;

@Service
@Slf4j
@Data
@AllArgsConstructor
public class RoutingService {
    @Autowired
    private final UrlRepo urlRepo;

    @Autowired
    private final KafkaService kafkaService;

    private URL get(Long id) {
        log.info(String.format("Fetching Url from database for Id %d", id));
        URL url = urlRepo.findById(id).get();
        return url;
    }

    /**
     * Uses the Base62 encoded to convert to Base10 number and fetches the corresponding record from the database
     *
     * @param shortenString Base62 encoded string
     * @return RealUrl object
     */
    public RealUrl getRealUrl(String shortenString) {
        log.debug("Converting Base 62 string %s to Base 10 id");
        Long id = UrlShortener.strToId(shortenString);
        log.info(String.format("Converted Base 62 string %s to Base 10 id %s", shortenString, id));

        log.info(String.format("Retrieving full url for %d", id));
        return new RealUrl(this.get(id).getRealUrl());
    }

    private URL save(RealUrl realUrl, Integer userId) {
        URL url = urlRepo.save(new URL(realUrl.getRealUrl(), userId));
        KafkaMessage msg = new KafkaMessage(KafkaMessageType.URL_CREATED, url);
        this.kafkaService.sendMessage(msg);
        return url;
    }

    /**
     * It saves the full url to database and uses the autogenerated id to convert to Base62 string
     *
     * @param realUrl RealUrl object to be converted to shortened url
     * @return FakeUrl object
     */
    public FakeUrl getFakeUrl(RealUrl realUrl, Integer userId) {

        log.info("Checking if the url already exists");
        List<URL> savedUrls = null;
        savedUrls = checkRealUrlAlreadyExists(realUrl, userId);

        URL savedUrl = null;

        if (savedUrls.isEmpty()) {
            log.info(String.format("Saving Url %s to database", realUrl.getRealUrl()));
            savedUrl = this.save(realUrl, userId);
            log.debug(savedUrl.toString());
        }
        else {
            savedUrl = savedUrls.get(0);
            log.info(String.format("url: %s already exists in the database. skipped insert", savedUrl));
        }

        log.debug(String.format("Converting Base 10 %d to Base 62 string", savedUrl.getId()));
        String fakeUrlText = UrlShortener.idToStr(savedUrl.getId());
        savedUrl.setFakeUrl(fakeUrlText);
        this.urlRepo.save(savedUrl);
        KafkaMessage msg = new KafkaMessage(KafkaMessageType.FAKE_URL_GENERATED, savedUrl);
        this.kafkaService.sendMessage(msg);
        log.info(String.format("Converted Base 10 %d to Base 62 string %s", savedUrl.getId(), fakeUrlText));
        return new FakeUrl(fakeUrlText);
    }

    /**
     * Check if Url already exists in the database to prevent having same url stored multiple times
     *
     * @param realUrl
     * @param userId
     * @return list of URL objects, list will be empty if no results found
     */
    private List<URL> checkRealUrlAlreadyExists(RealUrl realUrl, Integer userId) {
        return urlRepo.findUrlByRealUrl(realUrl.getRealUrl(), userId);
    }
}
